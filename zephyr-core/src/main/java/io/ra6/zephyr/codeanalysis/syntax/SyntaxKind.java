package io.ra6.zephyr.codeanalysis.syntax;

public enum SyntaxKind {

    // Tokens
    END_OF_FILE_TOKEN,

    PLUS_TOKEN,
    MINUS_TOKEN,
    STAR_TOKEN,
    SLASH_TOKEN,
    PERCENT_TOKEN,

    EQUALS_TOKEN,
    BANG_EQUALS_TOKEN,
    COLON_TOKEN,
    SEMICOLON_TOKEN,
    COMMA_TOKEN,
    QUESTION_TOKEN,
    DOT_TOKEN,
    PIPE_TOKEN,
    AMPERSAND_TOKEN,
    CARET_TOKEN,
    BANG_TOKEN,
    LESS_TOKEN,
    LESS_EQUALS_TOKEN,
    GREATER_TOKEN,
    GREATER_EQUALS_TOKEN,
    LESS_LESS_TOKEN,
    GREATER_GREATER_TOKEN,
    TILDE_TOKEN,

    PLUS_PLUS_TOKEN,
    MINUS_MINUS_TOKEN,
    EQUALS_EQUALS_TOKEN,
    PIPE_PIPE_TOKEN,
    AMPERSAND_AMPERSAND_TOKEN,

    OPEN_PARENTHESIS_TOKEN,
    CLOSE_PARENTHESIS_TOKEN,
    OPEN_BRACKET_TOKEN,
    CLOSE_BRACKET_TOKEN,
    OPEN_BRACE_TOKEN,
    CLOSE_BRACE_TOKEN,
    PLUS_EQUALS_TOKEN,
    MINUS_EQUALS_TOKEN,
    STAR_EQUALS_TOKEN,
    SLASH_EQUALS_TOKEN,

    STRING_TOKEN,
    BAD_TOKEN,
    NUMBER_TOKEN,
    FLOATING_POINT_TOKEN,
    IDENTIFIER_TOKEN,
    WHITESPACE_TOKEN,

    // Keywords
    CONST_KEYWORD,
    VAR_KEYWORD,
    TRUE_KEYWORD,
    FALSE_KEYWORD,
    IMPORT_KEYWORD,
    EXPORT_KEYWORD,
    FNC_KEYWORD,
    RETURN_KEYWORD,
    TYPE_KEYWORD,
    NATIVE_TYPE_KEYWORD,
    NEW_KEYWORD,
    AS_KEYWORD,
    BREAK_KEYWORD,
    CONTINUE_KEYWORD,
    IF_KEYWORD,
    ELSE_KEYWORD,
    WHILE_KEYWORD,
    DO_KEYWORD,
    FOR_KEYWORD,
    PUB_KEYWORD,
    PRV_KEYWORD,
    CONSTRUCTOR_KEYWORD,
    SHARED_KEYWORD,
    UNARY_OPERATOR_KEYWORD,
    BINARY_OPERATOR_KEYWORD,


    // Nodes
    COMPILATION_UNIT,
    TYPE_CLAUSE,
    ELSE_CLAUSE,
    FOR_INITIALIZER_CLAUSE,
    QUALIFIED_NAME,
    PARAMETER,
    GENERIC_PARAMETER_CLAUSE,
    GENERIC_PARAMETER,
    ARRAY_SIZE_CLAUSE,

    // Expressions
    ASSIGNMENT_EXPRESSION,
    CONDITIONAL_EXPRESSION,
    BINARY_EXPRESSION,
    UNARY_EXPRESSION,
    LITERAL_EXPRESSION,
    NAME_EXPRESSION,
    PARENTHESIZED_EXPRESSION,
    ARRAY_ACCESS_EXPRESSION,
    MEMBER_ACCESS_EXPRESSION,
    METHOD_CALL_EXPRESSION,
    INSTANCE_CREATION_EXPRESSION,
    ARRAY_LITERAL_EXPRESSION,
    ARRAY_CREATION_EXPRESSION,

    // Statements
    VARIABLE_DECLARATION,
    BLOCK_STATEMENT,
    EXPRESSION_STATEMENT,
    IMPORT_DECLARATION,
    EXPORT_DECLARATION,
    IF_STATEMENT,
    WHILE_STATEMENT,
    DO_WHILE_STATEMENT,
    FOR_STATEMENT,
    BREAK_STATEMENT,
    CONTINUE_STATEMENT,
    RETURN_STATEMENT,

    TYPE_DECLARATION,
    TYPE_FUNCTION_DECLARATION,
    TYPE_FIELD_DECLARATION,
    TYPE_CONSTRUCTOR_DECLARATION,
    TYPE_BINARY_OPERATOR_DECLARATION,
    TYPE_UNARY_OPERATOR_DECLARATION,
    NATIVE_TYPE_DECLARATION,

}