type List<TElement> {
    prv var size: int;
    prv var elements: TElement[];

    constructor() {
        this.elements = [];
        this.size = 0;
    }

    pub fnc add(element: TElement): void {
        const newSize: int = this.size + 1;
        const newElements: TElement[] = new TElement[newSize];

        var index: int = 0;

        while(index < this.size) {
            newElements[index] = this.elements[index];
            index = index + 1;
        }

        newElements[this.size] = element;

        this.elements = newElements;
        this.size = newSize;
    }

    pub fnc remove(index: int): void {
        if(index > this.size) {
            return;
        }

        const newSize: int = this.size - 1;
        if(newSize < 0) {
            return;
        }

        const newElements: TElement[] = new TElement[newSize];

        var i: int = 0;
        while(i < index) {
            newElements[i] = this.elements[i];
            i = i + 1;
        }

        i = index + 1;
        while(i < this.size) {
            newElements[i - 1] = this.elements[i];
            i = i + 1;
        }

        this.elements = newElements;
        this.size = newSize;
    }

    pub fnc get(index: int): TElement {
        return this.elements[index];
    }

    pub fnc count(): int {
        return this.size;
    }

    pub fnc clear(): void {
        this.elements = [];
        this.size = 0;
    }

    pub fnc toArray(): TElement[] {
        return this.elements.copy();
    }
}

export List;